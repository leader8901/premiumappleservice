

import re

text = '13 pro max 512 silver - 100000‚ÇΩüá™üá∫'

match = re.match(r'pro', text)

# text = '13 pro max 512 silver - 100000‚ÇΩüá™üá∫'
# price = re.findall(r'\w+', text)
# new_price = int(price[5]) + count
# print(new_price)
#
#
# match = re.search(r'pro max', text)


#print(match[0] if match else 'Not found')

count = 4000
def reformat():
    text2 = '13 pro max 512 silver - 106000‚ÇΩüá™üá∫'
    price = re.findall(r'\w+', text2)
    new_price = int(price[5]) + count
    print(new_price)


data = text.split('\n')
for phone in data:
    phone_data = phone.split(' ')
    model = ' '.join(phone_data[:3])
    memory = phone_data[3]
    color = phone_data[4]
    price = phone_data[6][:-2]
    region = phone_data[6][-2:]


#data = text2.split('\n')
#print(data)
#for phone in data:
    #phone_data = phone.split(' ')
    #price = re.split(r'\w+', text2)
    #new_price = int(price[5]) + count
    #print(new_price)
    #model = ' '.join(phone_data[:3])
    #print(price)
    # memory = phone_data[3]
    # print(memory)
#     color = phone_data[4]
#     print(color)
#     price = phone_data[6][:-2]
#     region = phone_data[6][-2:]
#     print(model, memory, color, price, region)


#         elif len(phone_data) <= 7:
#             model = ' '.join(phone_data[:3])
#             memory = phone_data[3]
#             color = phone_data[4]
#             price = phone_data[6][:-2]
#             region = phone_data[6][-2:]
# Phone.objects.create(model_phone=model,
#                      memory_phone=memory,
#                      colors_phone=color,
#                      price_phone=price,
#                      region_phone=region)

# –ª—É—á—à–µ bulk_create - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–æ–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ. –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

# def reverse_string(string):
#     index = len(string) - 1
#     reversed_string = ''
#
#     while index >= 0:
#         current_char = string[index]
#         reversed_string = reversed_string + current_char
#         # –¢–æ –∂–µ —Å–∞–º–æ–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
#         # reversed_string = f"{reversed_string}{current_char}"
#         index = index - 1
#
#     return reversed_string
#
# reverse_string('Game Of Thrones') # 'senorhT fO emaG'
# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
# reverse_string('')

# ''

'''
13 pro 512 green - 100000‚ÇΩüáØüáµ
13 pro max 512 silver - 100000‚ÇΩüá™üá∫
13 pro max 512 gold - 100000‚ÇΩüá∫üá∏
13 pro max 256 gray - 100000‚ÇΩüá∫üá∏
13 pro max 256 green - 100000‚ÇΩüáØüáµ
13 pro max 256 green - 100000‚ÇΩüá¶üá™
13 pro max 256 blue - 100000‚ÇΩüáØüáµ
13 pro max 256 blue - 100000‚ÇΩüá∫üá∏
13 pro max 256 silver - 100000‚ÇΩüáØüáµ
13 pro max 128 gray - 100000‚ÇΩüá∫üá∏
13 pro max 128 gray - 100000‚ÇΩüáØüáµ
13 pro max 128 blue - 100000‚ÇΩüáØüáµ
13 pro max 128 green - 100000‚ÇΩüáØüáµ

'''
'''
findall() ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
search() ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Match, –µ—Å–ª–∏ –≥–¥–µ-–ª–∏–±–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
split() ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
sub() ‚Äî –ó–∞–º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–æ–π
subn() ‚Äî –î–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ sub(), –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
match() ‚Äî –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
finditer() ‚Äî –ò—â–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å pattern, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä
compile() ‚Äî –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç regular expression, –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
fullmatch() ‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
flags (—Ñ–ª–∞–≥–∏) ‚Äî –£–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö, –≤–ª–∏—è—é—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è'''

from django.test import TestCase

# Create your tests here.

# class short(list):
#     def __init__(self, model_phone, memory, colors, price, region):
#         self.model_phone = model_phone
#         self.memory = memory
#         self.colors = colors
#         self.price = price
#         self.region = region
#
#     def short_price(self):
#         pass

# coun = 0
# price = input().split()
# for i in price:
#     i += 1
#     print(price)
# print(price[0])

# for c, value in enumerate(price, 1):
#     print(c, value)
#     #print(c)
# for i in range(len(price)):
#     print(i)
# name_phone = print(price[0] + price[1], price[3] + price[4] + price[5])
# p2 = short(price)
# print(", ".join(price))

# import re
# result = re.findall(r'^\w+', '')
# print(result)




#Check if the string starts with "The" and ends with "Spain":
# txt = "13 pro max 512 green - 119500‚ÇΩüáØüáµ"
# x = re.search("^pro.*max$", txt)
# if x:
#   print("YES! We have a match!")
# else:
#   print("No match")

# re.match()
# re.search()
# re.findall()
# re.split()
# re.sub()
# re.compile()


